#ifndef SNAKE_READER_H
#define SNAKE_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif


typedef const struct Snake_Message_Command_table *Snake_Message_Command_table_t;
typedef struct Snake_Message_Command_table *Snake_Message_Command_mutable_table_t;
typedef const flatbuffers_uoffset_t *Snake_Message_Command_vec_t;
typedef flatbuffers_uoffset_t *Snake_Message_Command_mutable_vec_t;
#ifndef Snake_Message_Command_file_identifier
#define Snake_Message_Command_file_identifier flatbuffers_identifier
#endif
/* deprecated, use Snake_Message_Command_file_identifier */
#ifndef Snake_Message_Command_identifier
#define Snake_Message_Command_identifier flatbuffers_identifier
#endif
#define Snake_Message_Command_type_hash ((flatbuffers_thash_t)0x8892bdc9)
#define Snake_Message_Command_type_identifier "\xc9\xbd\x92\x88"

typedef int8_t Snake_Message_Direction_enum_t;
__flatbuffers_define_integer_type(Snake_Message_Direction, Snake_Message_Direction_enum_t, 8)
#define Snake_Message_Direction_Up ((Snake_Message_Direction_enum_t)INT8_C(0))
#define Snake_Message_Direction_Right ((Snake_Message_Direction_enum_t)INT8_C(1))
#define Snake_Message_Direction_Left ((Snake_Message_Direction_enum_t)INT8_C(2))
#define Snake_Message_Direction_Down ((Snake_Message_Direction_enum_t)INT8_C(3))

static inline const char *Snake_Message_Direction_name(Snake_Message_Direction_enum_t value)
{
    switch (value) {
    case Snake_Message_Direction_Up: return "Up";
    case Snake_Message_Direction_Right: return "Right";
    case Snake_Message_Direction_Left: return "Left";
    case Snake_Message_Direction_Down: return "Down";
    default: return "";
    }
}

static inline int Snake_Message_Direction_is_known_value(Snake_Message_Direction_enum_t value)
{
    switch (value) {
    case Snake_Message_Direction_Up: return 1;
    case Snake_Message_Direction_Right: return 1;
    case Snake_Message_Direction_Left: return 1;
    case Snake_Message_Direction_Down: return 1;
    default: return 0;
    }
}



struct Snake_Message_Command_table { uint8_t unused__; };

static inline size_t Snake_Message_Command_vec_len(Snake_Message_Command_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Snake_Message_Command_table_t Snake_Message_Command_vec_at(Snake_Message_Command_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Snake_Message_Command_table_t, vec, i, 0)
__flatbuffers_table_as_root(Snake_Message_Command)

__flatbuffers_define_scalar_field(0, Snake_Message_Command, direction, Snake_Message_Direction, Snake_Message_Direction_enum_t, INT8_C(0))


#include "flatcc/flatcc_epilogue.h"
#endif /* SNAKE_READER_H */
