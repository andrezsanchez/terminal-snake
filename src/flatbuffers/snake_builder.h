#ifndef SNAKE_BUILDER_H
#define SNAKE_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef SNAKE_READER_H
#include "snake_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __Snake_Message_Direction_formal_args , Snake_Message_Direction_enum_t v0
#define __Snake_Message_Direction_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, Snake_Message_Direction, Snake_Message_Direction_enum_t)

static const flatbuffers_voffset_t __Snake_Message_Command_required[] = { 0 };
typedef flatbuffers_ref_t Snake_Message_Command_ref_t;
static Snake_Message_Command_ref_t Snake_Message_Command_clone(flatbuffers_builder_t *B, Snake_Message_Command_table_t t);
__flatbuffers_build_table(flatbuffers_, Snake_Message_Command, 1)

#define __Snake_Message_Command_formal_args , Snake_Message_Direction_enum_t v0
#define __Snake_Message_Command_call_args , v0
static inline Snake_Message_Command_ref_t Snake_Message_Command_create(flatbuffers_builder_t *B __Snake_Message_Command_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Snake_Message_Command, Snake_Message_Command_file_identifier, Snake_Message_Command_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, Snake_Message_Command_direction, Snake_Message_Direction, Snake_Message_Direction_enum_t, 1, 1, INT8_C(0), Snake_Message_Command)

static inline Snake_Message_Command_ref_t Snake_Message_Command_create(flatbuffers_builder_t *B __Snake_Message_Command_formal_args)
{
    if (Snake_Message_Command_start(B)
        || Snake_Message_Command_direction_add(B, v0)) {
        return 0;
    }
    return Snake_Message_Command_end(B);
}

static Snake_Message_Command_ref_t Snake_Message_Command_clone(flatbuffers_builder_t *B, Snake_Message_Command_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Snake_Message_Command_start(B)
        || Snake_Message_Command_direction_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Snake_Message_Command_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* SNAKE_BUILDER_H */
